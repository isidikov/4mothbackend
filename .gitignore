# Создано https://www.toptal.com/developers/gitignore/api/django
# Редактировать в https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.log
*.pot 
*.pyc
__pycache__/
local_settings.py 
db.sqlite3 
db.sqlite3-журнал 
медиа

# Если ваш процесс сборки включает запуск collectstatic, то вам, вероятно, не нужно включать staticfiles или вы не хотите их включать/
# в вашем репозитории Git. Соответствующим образом обновите и раскомментируйте следующую строку.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Скомпилированные в байтах / оптимизированные / DLL файлы 
*.py[cod]
*$py.class

# Расширения C 
*.so

# Дистрибутив / упаковка
.Python 
сборка/
development-eggs/
dist/
Загрузки/
eggs/
.eggs/
библиотека/
lib64/
части/
sdist/
var/
wheels/
поделиться /python-wheels/
*.egg-информация / 
.установлено.cfg
*.egg
МАНИФЕСТ

# PyInstaller
# Обычно эти файлы записываются скриптом python из шаблона
# перед тем, как PyInstaller соберет exe-файл, чтобы ввести в него дату / другую информацию.
* .манифест 
*.спецификация

# Журналы установщика 
pip-log.txt 
pip-delete-this-directory.txt

# Отчеты о модульном тестировании / покрытии 
htmlcov/
.токсин/
.nox/
.покрытие 
.покрытие.*
.кэш 
nosetests.xml 
coverage.xml 
*.обложка 
*.py, обложка 
.гипотеза/
.pytest_cache/
обложка/

# Переводы
*.mo

# Материал Django:

# Материал Flask: 
экземпляр/
.webassets-кэш

# Материал Scrapy:
.scrapy

# Документация Sphinx 
docs/_build/

# PyBuilder 
.pybuilder/ 
target/

# Блокнот Jupyter 
.ipynb_checkpoints

# IPython 
profile_default/
ipython_config.py

# pyenv
# Для библиотеки или пакета вы можете проигнорировать эти файлы, поскольку код
# предназначен для запуска в нескольких средах; в противном случае проверьте их в:
# .python-версия

# pipenv
# Согласно pypa / pipenv # 598, рекомендуется включить Pipfile .заблокировать систему управления версиями.
# Однако, в случае совместной работы, при наличии зависимостей, зависящих от платформы, или зависимостей
# не имея кроссплатформенной поддержки, pipenv может устанавливать зависимости, которые не работают, или нет.
# установите все необходимые зависимости.
#Pipfile.блокировка

# поэзия
# Аналогично Pipfile.lock, обычно рекомендуется включать poetry.блокировка в системе управления версиями.
# Это особенно рекомендуется для двоичных пакетов для обеспечения воспроизводимости и чаще всего
# обычно игнорируется для библиотек.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# дпм
# Аналогично Pipfile.lock, обычно рекомендуется включать pdm.lock в систему управления версиями.
#pdm.lock
# pdm хранит конфигурации всего проекта в .pdm.toml, но рекомендуется не включать его
# в системе управления версиями.
# https://pdm.fming.dev/#use-with-ide 
.pdm.toml

# PEP 582; используется, например, в github.com/David-OConnor/pyflow и github.com/pdm-project/pdm
__pypackages__/

# Начинка из сельдерея 
celerybeat-расписание 
celerybeat.pid

# SageMath проанализировал файлы 
*.sage.py

# Среды 
.env 
.venv 
env/
venv/
ENV / 
env.bak/
venv.bak/

# Настройки проекта Spyder 
.spyderproject 
.spyproject

# Настройки проекта Rope 
.ropeproject

# документация mkdocs 
/сайт

# mypy 
.mypy_cache/
.dmypy.json 
dmypy.json

# Проверка типов Pyre 
.pyre/

# статический анализатор типов pytype 
.pytype/

# Символы отладки Cython 
cython_debug/

# PyCharm
 Конкретный шаблон # JetBrains поддерживается в отдельном файле JetBrains.gitignore, который можно
# найти по ссылке https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# и который можно добавить в глобальный файл gitignore или объединить с этим файлом. Для более детального использования
 параметр # (не рекомендуется) вы можете раскомментировать следующее, чтобы игнорировать всю папку idea.
#.idea/

# Конец https://www.toptal.com/developers/gitignore/api/django